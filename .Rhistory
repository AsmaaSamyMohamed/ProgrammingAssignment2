my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf -  Inf
x <- rnorm (20)
x <- c( rnorm (20), rep(NA, 20))
skip ()
x[1, 10]
x[1:10]
x[is.na(x)]
y <- x![is.na(x)]
y <- x[!is.na(x)]
y
y [y > 0]
x [x >0]
x[!is.na(x) & x > 0]
skip 9
skip ()
skip ()
skip ()
skip ()
skip ()
skip ()
skip ()
skip ()
skip ()
skip ()
skip ()
skip ()
skip ()
my_vector <- c (1:20)
skip ()
my_vector
dim (my_vector)
lenght (my_vecto)
lenght (my_vector)
length (my_vector)
dim (my_vector) <- c(4,5)
dim (my_vector)
attributes (my_vector)
View(my_vector)
View(my_vector)
my_vector
class (my_vector)
my_matrix <- my_vector
matrix ()
matrix () ?
?
?
skip ()
? matrix ()
skip ()
my_matrix2 <- matrix (1:20, nrow = 4, ncols = 5)
my_matrix2 <- matrix (1:20, nrow = 4, ncol = 5)
skip ()
skip ()
skip ()
skip ()
skip ()
skip ()
skip ()
skip ()
skip ()
for ( i in 1: 10 ) {}
for ( i in 1: 10 ) { print (i)}
x <- matrix (1:6, 2, 3)
for (i in seq_len(nrow(x))) {
for (j in seq_len(ncol(x)))
print (x(i,j))
}
}
print (x[i,j])
for (i in seq_len(nrow(x))) {
for (j in seq_len(ncol(x)))
print (x[i,j])
}
View(x)
View(x)
for (i in seq_len(nrow(x)))
print (x[j,i])
x <- matrix (1:6, 2, 3)
for (j in seq_len(ncol(x))) {
for (i in seq_len(nrow(x)))
print (x[j,i])
}
}
swirl ()
library(swirl)
swirl ()
TRUE == TRUE
FALSE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
5 != 7
5 NOT 7
5 ! 7
skip ()
FALSE & FALSE
TRUE & c (TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE (6 > 4)
identical ('twins', 'twins')
xor (5 == 6, !FALSE)
ints <- sample (10)
iints
ints
ints > 5
which (ints > 7 )
any (ints <=0)
skip ()
all (ints > 0)
x+y
add2 <- function (x, y) {
x + y
}
add2 (2, 3)
above <- function (x, n) {
use <- x > n
x[use]
}
x <- 1: 20
above (x, 15)
columnmean <- function (y) {
nc <- ncol (y)
means <- numeric (nc)
for (i in 1:nc) {
means [i] <- mean (y [ ,i])
}
means
}
y <- matrix (1:6 , 2, 3)
columnmean(y)
mydata <- rnorm (100)
sd (mydata)
sd (x = mydata)
sd (x= mydata, na.rm = FALSE)
sd (x= mydata, na.rm = TRUE)
sd (mydata, na.rm = FALSE)
args (lm)
f <- function (a, b) {
print (a)
print (b)
}
f (2)
f (2, 4)
library ("swirl")
swirl ()
Sys.Date()
mean (2, 4, 5)
mean (c(2, 4, 5))
submit ()
boring_function('My first function!')
boring_function
submit ()
my_mean (c(4, 5, 10))
submit ()
submit ()
submit ()
remainder (5)
remainder (11, 5)
remainder (divisor = 11, num = 5)
remainder = ( 4, div = 2)
remainder ( 4, div = 2)
args (remanider)
args (remainder)
skip ()
evaluate (sd, c (1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
skip ()
evaluate (function (x){x[3]}, c (8, 4, 0))
evaluate (function (x){length [x]}
c(8,4,0)
evaluate (function (x){length [x]}, c (8, 4, 0))
skip ()
? paste
paste("Programming", "is", "fun!")
submit ()
submit ()
skip ()
telegram ('Good', "Morning")
skip ()
mad_libs(plllll, hjk,  jkhlm)
mad_libs('dfg', 'fgb', 'dddddddd')
skip ()
"%p%" ("I", "love", "R")
"%p%" ("I", "love", "R!")
skip ()
Sys.time()
Sys.Date()
x <- Sys.time()
p <- POSIXIt (x)
p <- as.POSIXIt (x)
p <- as.POSIXlt (x)
p
names (unclass(p))
p$sec
p$zone
p$wday
p$mday
?strptime
library ("swirl")
swirl ()
d1 <- Sys.Date
d1 <- Sys.Date()
class (d1)
unclass (d1)
d1
d2 <- as.Date ("1969-01-01")
unclass (d2)
t1 <- Sys.time()
t1
class (t1)
unclass (t1)
t2 <- as.POSIXclt(t1)
t2 <- as.POSIXclt(Sys.time(t1))
as.POSIXclt(Sys.time(t1))
skip ()
class (t2)
t2
unclass (t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(d1)
monthst1)
months(t1)
quarters(t2)
t3 <- str ("October 17, 1986 08:24")
t3 <- c ("October 17, 1986 08:24")
t3 <- c("October 17, 1986 08:24")
as.POSIXclt(Sys.time(t1))
skip ()
t4 <- striptime (t3, "%B %d, %Y %H:%M" )
t4 <- strptime (t3, "%B %d, %Y %H:%M" )
t4
class (t4)
Sys.time () > t1
Sys.time () - t1
difftime(Sys.time(), t1, units = 'days')
f <- function (x) {
g <- function (y){
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
x <- 1: 10
if (x > 5) {
x <- 0
}
cube <- function (x,n) {
x^3
}
cube (3)
?lapply
x <-list ( a =1:5, b=rnorm(10))
x
lapply (x, mean)
x <- 1:4
lapply (x, runif)
x <- list (a = matrix (1,4), b = matrix (1:6))
lapply (x, function (elt), elt [ ,1])
lapply (x, function (elt) elt [ ,1])
View(x)
View(x)
x <- list (a = matrix (1:4, 2,2), b = matrix (1:6, 3, 2))
lapply (x, function (elt) elt [ ,1])
y <- lapply (x, function (elt) elt [ ,1])
y
type (y)
class (y)
y <- sapply (x, function (elt) elt [ ,1])
y
x <-list ( a =1:5, b=rnorm(10))
sapply (x, mean)
x <- matrix (rnorm (200), 20, 10)
apply (x, 2, mean)
apply (x, 1, mean)
x <- matrix (a:6, 3, 2)
x <- matrix (1:6, 3, 2)
apply (x, 2, mean)
apply (x, 1, mean)
x <- matrix (rnorm (200), 20, 10)
apply (x, 1, quantile, probs = c(0.25, 0.75))
?quantile
x <- c (rnorm (10), runif (10), rnorm (10,1))
f <- gl (3,10)
f
tapply (x, f, mean)
y <- tapply (x, f, mean)
class (y)
y <- tapply (x, f, mean, simplify = TRUE)
class (y)
split (x,f)
x
lapply (split (x,f), mean)
library ("swirl")
swirl ()
head (flags)
dim (flags)
class (flags)
cls_list <- lapply (flags, class)
cls_list
class (cls_list)
as.character(cls_list)
cls_list <- sapply (flags, class)
cls_vect <- sapply (flags, class)
class (cls_vect)
sum (flags$orange)
flag_colors <- flags[ , 11:17]
flag_colors
head (flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[ , 19:23]
lapply (flag_shapes, range)
shape_mat <- sapply (flag_shapes, range)
shape_mat
class (shape_mat)
unique (c(3,4,5,5,5,6,6))
unique_vals <- lapply (flags, unique)
unique_vals
length (unique_vals)
sapply (unique_vals, length )
sapply (unique_vals, length )
sapply(flags, unique )
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique )
vapply (flags, unique, numeric (1))
ok ()
sapply(flags, class)
vapply (flags, unique, character (1))
vapply (flags, class, character (1))
?tapply
table (flags$landmass)
table (flags$animate)
tapply (flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$landmas, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
set.seed (20)
x <- rnorm (100)
e <- rnorm (100, 0, 2)
y <-0.5 + 2*x + e
summary (y)
plot (x, y)
x <- rbinom (100, 1, 0.5)
plot (x, y)
set.seed (1)
x <-rnorm (100)
log.mu <- 0.5 + 0.3 * x
y <- rpois (100, exp (log.mu))
summary (y)
plot (x, y)
set.seed (!)
set.seed (1)
rpois (5, 2)
library ("swirl")
swirl ()
ls ()
class (plants)
dim (plants)
nrow (plants)
ncol (plants)
object.size(plants)
names (plants)
head(plplants)
head(plants)
head (plants, 10)
tail (plants , 15)
summary(plants)
table(plants$Active_Growth_Period)
str (plants)
?sample
sample (1:6, 4, replace = TRUE)
sample (1:6, 4, replace = TRUE)
sample (1:20, 10)
sample (letters)
LETTERS
sample (LETTERS)
flips <- prob = c (0.3 , 0.7)
prob = c (0.3, 0.7)
filps <- sample (c(0,1), 100, replace = TRUE, prob = c (0.3, 0.7))
flips <- sample(c(0,1), 100, replace = TRUE,
| prob = c(0.3, 0.7))
flips <- sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips
sum (flips)
?rbinom
rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom (100, size = 1, prob = 0.7)
flips2
sum (flips2)
?rnorm
rnorm (1)
rnorm (10)
rnorm (10, 100, 25)
rpois (5, 10)
replicate (100, rpois (5, 10))
my_pois <- replicate (100, rpois (5, 10))
my_pois
cm <- colMeans(my_pois)
hist (cm)
data (cars)
?cars
head (cars)
plot (cars)
?plot
plot(x = cars$speed, y = cars$dist)
plot(x = cars$dist, y = cars$speed)
plot(x = speed , y = dist)
plot(x = Speed , y = dist)
skip ()
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance", main = "My Plot")
plot(cars, main = "My Plot")
plot(cars, main = "My Plot", subtitle = " My plot Subtitle")
plot(cars, main = "My Plot", sub = " My plot Subtitle")
plot(cars, sub = " My plot Subtitle")
plot(cars, sub = " My Plot Subtitle")
lot(cars, sub = "My Plot Subtitle")
Plot(cars, sub = "My Plot Subtitle")
plot (cars, sub = "My Plot Subtitle")
plot (cars, col = 2)
plot (cars, xlim = c(10, 15))
plot (cars, pch = 2)
mtcars
data (mtcars)
?boxplot
boxplot (formula = mpg ~ cyl, data = mtcars)
hist (mtcars)
hist (mtcars$mpg)
library("swirl")
swirl ()
skip ()
skip ()
skip ()
skip ()
skip ()
skip ()
skip ()
skip ()
skip ()
skip ()
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function (y) {
x <<- y
m <<- NULL
}
get <- function() x
list (set = set, get = get)
}
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function (y) {
x <<- y
inv <<- NULL
}
get <- function() {x}
setInverse <- function (inverse) {inv <<- inverse}
getInverse <- function () {inv}
list (set = set, get = get, setInverse = setInverse, getInverse = getInverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
inv <- x$getInverse ()
if (!is.null(inv)) {
message ("getting cached data")
return (inv)
}
mat <- x$get ()
inv <- solve (mat, ...)
x$setInverse (inv)
inv
}
source ("cachematrix.R")
setwd("F:/R_Assignment/ProgrammingAssignment2")
source ("cachematrix.R")
my_matrix <- makeCacheMatrix(matrix (1:4, 2,2))
my_matrix$get()
my_matrix$getInverse()
my_matrix$get()
my_matrix$get()
source ("cachematrix.R")
my_matrix <- makeCacheMatrix(1:4, 2, 2)
my_matrix <- makeCacheMatrix(matrix (1:4, 2, 2))
my_matrix$get()
my_matrix$getInverse()
cacheSolve(my_matrix)
my_matrix$getInverse()
my_matrix$set(matrix(c(2,2,1,4),2,2))
my_matrix$get()
